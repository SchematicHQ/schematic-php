<?php
/**
 * BillingSubscriptionDiscountView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Schematic API
 *
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: engineering@schematichq.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Schematic\Model;

use \ArrayAccess;
use \Schematic\ObjectSerializer;

/**
 * BillingSubscriptionDiscountView Class Doc Comment
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillingSubscriptionDiscountView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BillingSubscriptionDiscountView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount_off' => 'int',
        'coupon_id' => 'string',
        'coupon_name' => 'string',
        'currency' => 'string',
        'customer_facing_code' => 'string',
        'discount_external_id' => 'string',
        'duration' => 'string',
        'duration_in_months' => 'int',
        'ended_at' => '\DateTime',
        'is_active' => 'bool',
        'percent_off' => 'float',
        'promo_code_external_id' => 'string',
        'started_at' => '\DateTime',
        'subscription_external_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount_off' => null,
        'coupon_id' => null,
        'coupon_name' => null,
        'currency' => null,
        'customer_facing_code' => null,
        'discount_external_id' => null,
        'duration' => null,
        'duration_in_months' => null,
        'ended_at' => 'date-time',
        'is_active' => null,
        'percent_off' => null,
        'promo_code_external_id' => null,
        'started_at' => 'date-time',
        'subscription_external_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount_off' => true,
        'coupon_id' => false,
        'coupon_name' => false,
        'currency' => true,
        'customer_facing_code' => true,
        'discount_external_id' => false,
        'duration' => false,
        'duration_in_months' => true,
        'ended_at' => true,
        'is_active' => false,
        'percent_off' => true,
        'promo_code_external_id' => true,
        'started_at' => false,
        'subscription_external_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_off' => 'amount_off',
        'coupon_id' => 'coupon_id',
        'coupon_name' => 'coupon_name',
        'currency' => 'currency',
        'customer_facing_code' => 'customer_facing_code',
        'discount_external_id' => 'discount_external_id',
        'duration' => 'duration',
        'duration_in_months' => 'duration_in_months',
        'ended_at' => 'ended_at',
        'is_active' => 'is_active',
        'percent_off' => 'percent_off',
        'promo_code_external_id' => 'promo_code_external_id',
        'started_at' => 'started_at',
        'subscription_external_id' => 'subscription_external_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_off' => 'setAmountOff',
        'coupon_id' => 'setCouponId',
        'coupon_name' => 'setCouponName',
        'currency' => 'setCurrency',
        'customer_facing_code' => 'setCustomerFacingCode',
        'discount_external_id' => 'setDiscountExternalId',
        'duration' => 'setDuration',
        'duration_in_months' => 'setDurationInMonths',
        'ended_at' => 'setEndedAt',
        'is_active' => 'setIsActive',
        'percent_off' => 'setPercentOff',
        'promo_code_external_id' => 'setPromoCodeExternalId',
        'started_at' => 'setStartedAt',
        'subscription_external_id' => 'setSubscriptionExternalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_off' => 'getAmountOff',
        'coupon_id' => 'getCouponId',
        'coupon_name' => 'getCouponName',
        'currency' => 'getCurrency',
        'customer_facing_code' => 'getCustomerFacingCode',
        'discount_external_id' => 'getDiscountExternalId',
        'duration' => 'getDuration',
        'duration_in_months' => 'getDurationInMonths',
        'ended_at' => 'getEndedAt',
        'is_active' => 'getIsActive',
        'percent_off' => 'getPercentOff',
        'promo_code_external_id' => 'getPromoCodeExternalId',
        'started_at' => 'getStartedAt',
        'subscription_external_id' => 'getSubscriptionExternalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount_off', $data ?? [], null);
        $this->setIfExists('coupon_id', $data ?? [], null);
        $this->setIfExists('coupon_name', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('customer_facing_code', $data ?? [], null);
        $this->setIfExists('discount_external_id', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('duration_in_months', $data ?? [], null);
        $this->setIfExists('ended_at', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('percent_off', $data ?? [], null);
        $this->setIfExists('promo_code_external_id', $data ?? [], null);
        $this->setIfExists('started_at', $data ?? [], null);
        $this->setIfExists('subscription_external_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['coupon_id'] === null) {
            $invalidProperties[] = "'coupon_id' can't be null";
        }
        if ($this->container['coupon_name'] === null) {
            $invalidProperties[] = "'coupon_name' can't be null";
        }
        if ($this->container['discount_external_id'] === null) {
            $invalidProperties[] = "'discount_external_id' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['started_at'] === null) {
            $invalidProperties[] = "'started_at' can't be null";
        }
        if ($this->container['subscription_external_id'] === null) {
            $invalidProperties[] = "'subscription_external_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_off
     *
     * @return int|null
     */
    public function getAmountOff()
    {
        return $this->container['amount_off'];
    }

    /**
     * Sets amount_off
     *
     * @param int|null $amount_off amount_off
     *
     * @return self
     */
    public function setAmountOff($amount_off)
    {
        if (is_null($amount_off)) {
            array_push($this->openAPINullablesSetToNull, 'amount_off');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_off', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_off'] = $amount_off;

        return $this;
    }

    /**
     * Gets coupon_id
     *
     * @return string
     */
    public function getCouponId()
    {
        return $this->container['coupon_id'];
    }

    /**
     * Sets coupon_id
     *
     * @param string $coupon_id coupon_id
     *
     * @return self
     */
    public function setCouponId($coupon_id)
    {
        if (is_null($coupon_id)) {
            throw new \InvalidArgumentException('non-nullable coupon_id cannot be null');
        }
        $this->container['coupon_id'] = $coupon_id;

        return $this;
    }

    /**
     * Gets coupon_name
     *
     * @return string
     */
    public function getCouponName()
    {
        return $this->container['coupon_name'];
    }

    /**
     * Sets coupon_name
     *
     * @param string $coupon_name coupon_name
     *
     * @return self
     */
    public function setCouponName($coupon_name)
    {
        if (is_null($coupon_name)) {
            throw new \InvalidArgumentException('non-nullable coupon_name cannot be null');
        }
        $this->container['coupon_name'] = $coupon_name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer_facing_code
     *
     * @return string|null
     */
    public function getCustomerFacingCode()
    {
        return $this->container['customer_facing_code'];
    }

    /**
     * Sets customer_facing_code
     *
     * @param string|null $customer_facing_code customer_facing_code
     *
     * @return self
     */
    public function setCustomerFacingCode($customer_facing_code)
    {
        if (is_null($customer_facing_code)) {
            array_push($this->openAPINullablesSetToNull, 'customer_facing_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_facing_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_facing_code'] = $customer_facing_code;

        return $this;
    }

    /**
     * Gets discount_external_id
     *
     * @return string
     */
    public function getDiscountExternalId()
    {
        return $this->container['discount_external_id'];
    }

    /**
     * Sets discount_external_id
     *
     * @param string $discount_external_id discount_external_id
     *
     * @return self
     */
    public function setDiscountExternalId($discount_external_id)
    {
        if (is_null($discount_external_id)) {
            throw new \InvalidArgumentException('non-nullable discount_external_id cannot be null');
        }
        $this->container['discount_external_id'] = $discount_external_id;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets duration_in_months
     *
     * @return int|null
     */
    public function getDurationInMonths()
    {
        return $this->container['duration_in_months'];
    }

    /**
     * Sets duration_in_months
     *
     * @param int|null $duration_in_months duration_in_months
     *
     * @return self
     */
    public function setDurationInMonths($duration_in_months)
    {
        if (is_null($duration_in_months)) {
            array_push($this->openAPINullablesSetToNull, 'duration_in_months');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration_in_months', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duration_in_months'] = $duration_in_months;

        return $this;
    }

    /**
     * Gets ended_at
     *
     * @return \DateTime|null
     */
    public function getEndedAt()
    {
        return $this->container['ended_at'];
    }

    /**
     * Sets ended_at
     *
     * @param \DateTime|null $ended_at ended_at
     *
     * @return self
     */
    public function setEndedAt($ended_at)
    {
        if (is_null($ended_at)) {
            array_push($this->openAPINullablesSetToNull, 'ended_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ended_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ended_at'] = $ended_at;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets percent_off
     *
     * @return float|null
     */
    public function getPercentOff()
    {
        return $this->container['percent_off'];
    }

    /**
     * Sets percent_off
     *
     * @param float|null $percent_off percent_off
     *
     * @return self
     */
    public function setPercentOff($percent_off)
    {
        if (is_null($percent_off)) {
            array_push($this->openAPINullablesSetToNull, 'percent_off');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('percent_off', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['percent_off'] = $percent_off;

        return $this;
    }

    /**
     * Gets promo_code_external_id
     *
     * @return string|null
     */
    public function getPromoCodeExternalId()
    {
        return $this->container['promo_code_external_id'];
    }

    /**
     * Sets promo_code_external_id
     *
     * @param string|null $promo_code_external_id promo_code_external_id
     *
     * @return self
     */
    public function setPromoCodeExternalId($promo_code_external_id)
    {
        if (is_null($promo_code_external_id)) {
            array_push($this->openAPINullablesSetToNull, 'promo_code_external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('promo_code_external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['promo_code_external_id'] = $promo_code_external_id;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return \DateTime
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param \DateTime $started_at started_at
     *
     * @return self
     */
    public function setStartedAt($started_at)
    {
        if (is_null($started_at)) {
            throw new \InvalidArgumentException('non-nullable started_at cannot be null');
        }
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets subscription_external_id
     *
     * @return string
     */
    public function getSubscriptionExternalId()
    {
        return $this->container['subscription_external_id'];
    }

    /**
     * Sets subscription_external_id
     *
     * @param string $subscription_external_id subscription_external_id
     *
     * @return self
     */
    public function setSubscriptionExternalId($subscription_external_id)
    {
        if (is_null($subscription_external_id)) {
            throw new \InvalidArgumentException('non-nullable subscription_external_id cannot be null');
        }
        $this->container['subscription_external_id'] = $subscription_external_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


