<?php
/**
 * CheckFlagResponseData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Schematic API
 *
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: engineering@schematichq.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Schematic\Model;

use \ArrayAccess;
use \Schematic\ObjectSerializer;

/**
 * CheckFlagResponseData Class Doc Comment
 *
 * @category Class
 * @description The returned resource
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckFlagResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckFlagResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'company_id' => 'string',
        'error' => 'string',
        'feature_allocation' => 'int',
        'feature_usage' => 'int',
        'feature_usage_period' => 'string',
        'feature_usage_reset_at' => '\DateTime',
        'flag' => 'string',
        'flag_id' => 'string',
        'reason' => 'string',
        'rule_id' => 'string',
        'rule_type' => 'string',
        'user_id' => 'string',
        'value' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'company_id' => null,
        'error' => null,
        'feature_allocation' => null,
        'feature_usage' => null,
        'feature_usage_period' => null,
        'feature_usage_reset_at' => 'date-time',
        'flag' => null,
        'flag_id' => null,
        'reason' => null,
        'rule_id' => null,
        'rule_type' => null,
        'user_id' => null,
        'value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'company_id' => true,
        'error' => true,
        'feature_allocation' => true,
        'feature_usage' => true,
        'feature_usage_period' => true,
        'feature_usage_reset_at' => true,
        'flag' => false,
        'flag_id' => true,
        'reason' => false,
        'rule_id' => true,
        'rule_type' => true,
        'user_id' => true,
        'value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_id' => 'company_id',
        'error' => 'error',
        'feature_allocation' => 'feature_allocation',
        'feature_usage' => 'feature_usage',
        'feature_usage_period' => 'feature_usage_period',
        'feature_usage_reset_at' => 'feature_usage_reset_at',
        'flag' => 'flag',
        'flag_id' => 'flag_id',
        'reason' => 'reason',
        'rule_id' => 'rule_id',
        'rule_type' => 'rule_type',
        'user_id' => 'user_id',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_id' => 'setCompanyId',
        'error' => 'setError',
        'feature_allocation' => 'setFeatureAllocation',
        'feature_usage' => 'setFeatureUsage',
        'feature_usage_period' => 'setFeatureUsagePeriod',
        'feature_usage_reset_at' => 'setFeatureUsageResetAt',
        'flag' => 'setFlag',
        'flag_id' => 'setFlagId',
        'reason' => 'setReason',
        'rule_id' => 'setRuleId',
        'rule_type' => 'setRuleType',
        'user_id' => 'setUserId',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_id' => 'getCompanyId',
        'error' => 'getError',
        'feature_allocation' => 'getFeatureAllocation',
        'feature_usage' => 'getFeatureUsage',
        'feature_usage_period' => 'getFeatureUsagePeriod',
        'feature_usage_reset_at' => 'getFeatureUsageResetAt',
        'flag' => 'getFlag',
        'flag_id' => 'getFlagId',
        'reason' => 'getReason',
        'rule_id' => 'getRuleId',
        'rule_type' => 'getRuleType',
        'user_id' => 'getUserId',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('company_id', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('feature_allocation', $data ?? [], null);
        $this->setIfExists('feature_usage', $data ?? [], null);
        $this->setIfExists('feature_usage_period', $data ?? [], null);
        $this->setIfExists('feature_usage_reset_at', $data ?? [], null);
        $this->setIfExists('flag', $data ?? [], null);
        $this->setIfExists('flag_id', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('rule_id', $data ?? [], null);
        $this->setIfExists('rule_type', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['flag'] === null) {
            $invalidProperties[] = "'flag' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id If company keys were provided and matched a company, its ID
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        if (is_null($company_id)) {
            array_push($this->openAPINullablesSetToNull, 'company_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error If an error occurred while checking the flag, the error message
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets feature_allocation
     *
     * @return int|null
     */
    public function getFeatureAllocation()
    {
        return $this->container['feature_allocation'];
    }

    /**
     * Sets feature_allocation
     *
     * @param int|null $feature_allocation If a numeric feature entitlement rule was matched, its allocation
     *
     * @return self
     */
    public function setFeatureAllocation($feature_allocation)
    {
        if (is_null($feature_allocation)) {
            array_push($this->openAPINullablesSetToNull, 'feature_allocation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('feature_allocation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['feature_allocation'] = $feature_allocation;

        return $this;
    }

    /**
     * Gets feature_usage
     *
     * @return int|null
     */
    public function getFeatureUsage()
    {
        return $this->container['feature_usage'];
    }

    /**
     * Sets feature_usage
     *
     * @param int|null $feature_usage If a numeric feature entitlement rule was matched, the company's usage
     *
     * @return self
     */
    public function setFeatureUsage($feature_usage)
    {
        if (is_null($feature_usage)) {
            array_push($this->openAPINullablesSetToNull, 'feature_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('feature_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['feature_usage'] = $feature_usage;

        return $this;
    }

    /**
     * Gets feature_usage_period
     *
     * @return string|null
     */
    public function getFeatureUsagePeriod()
    {
        return $this->container['feature_usage_period'];
    }

    /**
     * Sets feature_usage_period
     *
     * @param string|null $feature_usage_period For event-based feature entitlement rules, the period over which usage is tracked (current_month, current_day, current_week, all_time)
     *
     * @return self
     */
    public function setFeatureUsagePeriod($feature_usage_period)
    {
        if (is_null($feature_usage_period)) {
            array_push($this->openAPINullablesSetToNull, 'feature_usage_period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('feature_usage_period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['feature_usage_period'] = $feature_usage_period;

        return $this;
    }

    /**
     * Gets feature_usage_reset_at
     *
     * @return \DateTime|null
     */
    public function getFeatureUsageResetAt()
    {
        return $this->container['feature_usage_reset_at'];
    }

    /**
     * Sets feature_usage_reset_at
     *
     * @param \DateTime|null $feature_usage_reset_at For event-based feature entitlement rules, when the usage period will reset
     *
     * @return self
     */
    public function setFeatureUsageResetAt($feature_usage_reset_at)
    {
        if (is_null($feature_usage_reset_at)) {
            array_push($this->openAPINullablesSetToNull, 'feature_usage_reset_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('feature_usage_reset_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['feature_usage_reset_at'] = $feature_usage_reset_at;

        return $this;
    }

    /**
     * Gets flag
     *
     * @return string
     */
    public function getFlag()
    {
        return $this->container['flag'];
    }

    /**
     * Sets flag
     *
     * @param string $flag The key used to check the flag
     *
     * @return self
     */
    public function setFlag($flag)
    {
        if (is_null($flag)) {
            throw new \InvalidArgumentException('non-nullable flag cannot be null');
        }
        $this->container['flag'] = $flag;

        return $this;
    }

    /**
     * Gets flag_id
     *
     * @return string|null
     */
    public function getFlagId()
    {
        return $this->container['flag_id'];
    }

    /**
     * Sets flag_id
     *
     * @param string|null $flag_id If a flag was found, its ID
     *
     * @return self
     */
    public function setFlagId($flag_id)
    {
        if (is_null($flag_id)) {
            array_push($this->openAPINullablesSetToNull, 'flag_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flag_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['flag_id'] = $flag_id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason A human-readable explanation of the result
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets rule_id
     *
     * @return string|null
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param string|null $rule_id If a rule was found, its ID
     *
     * @return self
     */
    public function setRuleId($rule_id)
    {
        if (is_null($rule_id)) {
            array_push($this->openAPINullablesSetToNull, 'rule_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets rule_type
     *
     * @return string|null
     */
    public function getRuleType()
    {
        return $this->container['rule_type'];
    }

    /**
     * Sets rule_type
     *
     * @param string|null $rule_type If a rule was found, its type
     *
     * @return self
     */
    public function setRuleType($rule_type)
    {
        if (is_null($rule_type)) {
            array_push($this->openAPINullablesSetToNull, 'rule_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_type'] = $rule_type;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id If user keys were provided and matched a user, its ID
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets value
     *
     * @return bool
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param bool $value A boolean flag check result; for feature entitlements, this represents whether further consumption of the feature is permitted
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


