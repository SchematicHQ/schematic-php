<?php
/**
 * PaymentMethodRequestBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Schematic API
 *
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: engineering@schematichq.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Schematic\Model;

use \ArrayAccess;
use \Schematic\ObjectSerializer;

/**
 * PaymentMethodRequestBody Class Doc Comment
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentMethodRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentMethodRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_last4' => 'string',
        'account_name' => 'string',
        'bank_name' => 'string',
        'billing_email' => 'string',
        'billing_name' => 'string',
        'card_brand' => 'string',
        'card_exp_month' => 'int',
        'card_exp_year' => 'int',
        'card_last4' => 'string',
        'customer_external_id' => 'string',
        'payment_method_type' => 'string',
        'subscription_external_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_last4' => null,
        'account_name' => null,
        'bank_name' => null,
        'billing_email' => null,
        'billing_name' => null,
        'card_brand' => null,
        'card_exp_month' => null,
        'card_exp_year' => null,
        'card_last4' => null,
        'customer_external_id' => null,
        'payment_method_type' => null,
        'subscription_external_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_last4' => true,
        'account_name' => true,
        'bank_name' => true,
        'billing_email' => true,
        'billing_name' => true,
        'card_brand' => true,
        'card_exp_month' => true,
        'card_exp_year' => true,
        'card_last4' => true,
        'customer_external_id' => false,
        'payment_method_type' => false,
        'subscription_external_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_last4' => 'account_last4',
        'account_name' => 'account_name',
        'bank_name' => 'bank_name',
        'billing_email' => 'billing_email',
        'billing_name' => 'billing_name',
        'card_brand' => 'card_brand',
        'card_exp_month' => 'card_exp_month',
        'card_exp_year' => 'card_exp_year',
        'card_last4' => 'card_last4',
        'customer_external_id' => 'customer_external_id',
        'payment_method_type' => 'payment_method_type',
        'subscription_external_id' => 'subscription_external_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_last4' => 'setAccountLast4',
        'account_name' => 'setAccountName',
        'bank_name' => 'setBankName',
        'billing_email' => 'setBillingEmail',
        'billing_name' => 'setBillingName',
        'card_brand' => 'setCardBrand',
        'card_exp_month' => 'setCardExpMonth',
        'card_exp_year' => 'setCardExpYear',
        'card_last4' => 'setCardLast4',
        'customer_external_id' => 'setCustomerExternalId',
        'payment_method_type' => 'setPaymentMethodType',
        'subscription_external_id' => 'setSubscriptionExternalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_last4' => 'getAccountLast4',
        'account_name' => 'getAccountName',
        'bank_name' => 'getBankName',
        'billing_email' => 'getBillingEmail',
        'billing_name' => 'getBillingName',
        'card_brand' => 'getCardBrand',
        'card_exp_month' => 'getCardExpMonth',
        'card_exp_year' => 'getCardExpYear',
        'card_last4' => 'getCardLast4',
        'customer_external_id' => 'getCustomerExternalId',
        'payment_method_type' => 'getPaymentMethodType',
        'subscription_external_id' => 'getSubscriptionExternalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_last4', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('billing_email', $data ?? [], null);
        $this->setIfExists('billing_name', $data ?? [], null);
        $this->setIfExists('card_brand', $data ?? [], null);
        $this->setIfExists('card_exp_month', $data ?? [], null);
        $this->setIfExists('card_exp_year', $data ?? [], null);
        $this->setIfExists('card_last4', $data ?? [], null);
        $this->setIfExists('customer_external_id', $data ?? [], null);
        $this->setIfExists('payment_method_type', $data ?? [], null);
        $this->setIfExists('subscription_external_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_external_id'] === null) {
            $invalidProperties[] = "'customer_external_id' can't be null";
        }
        if ($this->container['payment_method_type'] === null) {
            $invalidProperties[] = "'payment_method_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_last4
     *
     * @return string|null
     */
    public function getAccountLast4()
    {
        return $this->container['account_last4'];
    }

    /**
     * Sets account_last4
     *
     * @param string|null $account_last4 account_last4
     *
     * @return self
     */
    public function setAccountLast4($account_last4)
    {
        if (is_null($account_last4)) {
            array_push($this->openAPINullablesSetToNull, 'account_last4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_last4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_last4'] = $account_last4;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            array_push($this->openAPINullablesSetToNull, 'account_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name bank_name
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            array_push($this->openAPINullablesSetToNull, 'bank_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets billing_email
     *
     * @return string|null
     */
    public function getBillingEmail()
    {
        return $this->container['billing_email'];
    }

    /**
     * Sets billing_email
     *
     * @param string|null $billing_email billing_email
     *
     * @return self
     */
    public function setBillingEmail($billing_email)
    {
        if (is_null($billing_email)) {
            array_push($this->openAPINullablesSetToNull, 'billing_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_email'] = $billing_email;

        return $this;
    }

    /**
     * Gets billing_name
     *
     * @return string|null
     */
    public function getBillingName()
    {
        return $this->container['billing_name'];
    }

    /**
     * Sets billing_name
     *
     * @param string|null $billing_name billing_name
     *
     * @return self
     */
    public function setBillingName($billing_name)
    {
        if (is_null($billing_name)) {
            array_push($this->openAPINullablesSetToNull, 'billing_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_name'] = $billing_name;

        return $this;
    }

    /**
     * Gets card_brand
     *
     * @return string|null
     */
    public function getCardBrand()
    {
        return $this->container['card_brand'];
    }

    /**
     * Sets card_brand
     *
     * @param string|null $card_brand card_brand
     *
     * @return self
     */
    public function setCardBrand($card_brand)
    {
        if (is_null($card_brand)) {
            array_push($this->openAPINullablesSetToNull, 'card_brand');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_brand', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_brand'] = $card_brand;

        return $this;
    }

    /**
     * Gets card_exp_month
     *
     * @return int|null
     */
    public function getCardExpMonth()
    {
        return $this->container['card_exp_month'];
    }

    /**
     * Sets card_exp_month
     *
     * @param int|null $card_exp_month card_exp_month
     *
     * @return self
     */
    public function setCardExpMonth($card_exp_month)
    {
        if (is_null($card_exp_month)) {
            array_push($this->openAPINullablesSetToNull, 'card_exp_month');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_exp_month', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_exp_month'] = $card_exp_month;

        return $this;
    }

    /**
     * Gets card_exp_year
     *
     * @return int|null
     */
    public function getCardExpYear()
    {
        return $this->container['card_exp_year'];
    }

    /**
     * Sets card_exp_year
     *
     * @param int|null $card_exp_year card_exp_year
     *
     * @return self
     */
    public function setCardExpYear($card_exp_year)
    {
        if (is_null($card_exp_year)) {
            array_push($this->openAPINullablesSetToNull, 'card_exp_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_exp_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_exp_year'] = $card_exp_year;

        return $this;
    }

    /**
     * Gets card_last4
     *
     * @return string|null
     */
    public function getCardLast4()
    {
        return $this->container['card_last4'];
    }

    /**
     * Sets card_last4
     *
     * @param string|null $card_last4 card_last4
     *
     * @return self
     */
    public function setCardLast4($card_last4)
    {
        if (is_null($card_last4)) {
            array_push($this->openAPINullablesSetToNull, 'card_last4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_last4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_last4'] = $card_last4;

        return $this;
    }

    /**
     * Gets customer_external_id
     *
     * @return string
     */
    public function getCustomerExternalId()
    {
        return $this->container['customer_external_id'];
    }

    /**
     * Sets customer_external_id
     *
     * @param string $customer_external_id customer_external_id
     *
     * @return self
     */
    public function setCustomerExternalId($customer_external_id)
    {
        if (is_null($customer_external_id)) {
            throw new \InvalidArgumentException('non-nullable customer_external_id cannot be null');
        }
        $this->container['customer_external_id'] = $customer_external_id;

        return $this;
    }

    /**
     * Gets payment_method_type
     *
     * @return string
     */
    public function getPaymentMethodType()
    {
        return $this->container['payment_method_type'];
    }

    /**
     * Sets payment_method_type
     *
     * @param string $payment_method_type payment_method_type
     *
     * @return self
     */
    public function setPaymentMethodType($payment_method_type)
    {
        if (is_null($payment_method_type)) {
            throw new \InvalidArgumentException('non-nullable payment_method_type cannot be null');
        }
        $this->container['payment_method_type'] = $payment_method_type;

        return $this;
    }

    /**
     * Gets subscription_external_id
     *
     * @return string|null
     */
    public function getSubscriptionExternalId()
    {
        return $this->container['subscription_external_id'];
    }

    /**
     * Sets subscription_external_id
     *
     * @param string|null $subscription_external_id subscription_external_id
     *
     * @return self
     */
    public function setSubscriptionExternalId($subscription_external_id)
    {
        if (is_null($subscription_external_id)) {
            array_push($this->openAPINullablesSetToNull, 'subscription_external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscription_external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subscription_external_id'] = $subscription_external_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


