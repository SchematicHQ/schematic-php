<?php
/**
 * PreviewSubscriptionChangeResponseData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Schematic API
 *
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: engineering@schematichq.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Schematic\Model;

use \ArrayAccess;
use \Schematic\ObjectSerializer;

/**
 * PreviewSubscriptionChangeResponseData Class Doc Comment
 *
 * @category Class
 * @description The requested resource
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PreviewSubscriptionChangeResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PreviewSubscriptionChangeResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount_off' => 'int',
        'due_now' => 'int',
        'new_charges' => 'int',
        'percent_off' => 'float',
        'period_start' => '\DateTime',
        'promo_code_applied' => 'bool',
        'proration' => 'int',
        'trial_end' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount_off' => null,
        'due_now' => null,
        'new_charges' => null,
        'percent_off' => null,
        'period_start' => 'date-time',
        'promo_code_applied' => null,
        'proration' => null,
        'trial_end' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount_off' => false,
        'due_now' => false,
        'new_charges' => false,
        'percent_off' => false,
        'period_start' => false,
        'promo_code_applied' => false,
        'proration' => false,
        'trial_end' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_off' => 'amount_off',
        'due_now' => 'due_now',
        'new_charges' => 'new_charges',
        'percent_off' => 'percent_off',
        'period_start' => 'period_start',
        'promo_code_applied' => 'promo_code_applied',
        'proration' => 'proration',
        'trial_end' => 'trial_end'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_off' => 'setAmountOff',
        'due_now' => 'setDueNow',
        'new_charges' => 'setNewCharges',
        'percent_off' => 'setPercentOff',
        'period_start' => 'setPeriodStart',
        'promo_code_applied' => 'setPromoCodeApplied',
        'proration' => 'setProration',
        'trial_end' => 'setTrialEnd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_off' => 'getAmountOff',
        'due_now' => 'getDueNow',
        'new_charges' => 'getNewCharges',
        'percent_off' => 'getPercentOff',
        'period_start' => 'getPeriodStart',
        'promo_code_applied' => 'getPromoCodeApplied',
        'proration' => 'getProration',
        'trial_end' => 'getTrialEnd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount_off', $data ?? [], null);
        $this->setIfExists('due_now', $data ?? [], null);
        $this->setIfExists('new_charges', $data ?? [], null);
        $this->setIfExists('percent_off', $data ?? [], null);
        $this->setIfExists('period_start', $data ?? [], null);
        $this->setIfExists('promo_code_applied', $data ?? [], null);
        $this->setIfExists('proration', $data ?? [], null);
        $this->setIfExists('trial_end', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount_off'] === null) {
            $invalidProperties[] = "'amount_off' can't be null";
        }
        if ($this->container['due_now'] === null) {
            $invalidProperties[] = "'due_now' can't be null";
        }
        if ($this->container['new_charges'] === null) {
            $invalidProperties[] = "'new_charges' can't be null";
        }
        if ($this->container['percent_off'] === null) {
            $invalidProperties[] = "'percent_off' can't be null";
        }
        if ($this->container['period_start'] === null) {
            $invalidProperties[] = "'period_start' can't be null";
        }
        if ($this->container['promo_code_applied'] === null) {
            $invalidProperties[] = "'promo_code_applied' can't be null";
        }
        if ($this->container['proration'] === null) {
            $invalidProperties[] = "'proration' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_off
     *
     * @return int
     */
    public function getAmountOff()
    {
        return $this->container['amount_off'];
    }

    /**
     * Sets amount_off
     *
     * @param int $amount_off amount_off
     *
     * @return self
     */
    public function setAmountOff($amount_off)
    {
        if (is_null($amount_off)) {
            throw new \InvalidArgumentException('non-nullable amount_off cannot be null');
        }
        $this->container['amount_off'] = $amount_off;

        return $this;
    }

    /**
     * Gets due_now
     *
     * @return int
     */
    public function getDueNow()
    {
        return $this->container['due_now'];
    }

    /**
     * Sets due_now
     *
     * @param int $due_now due_now
     *
     * @return self
     */
    public function setDueNow($due_now)
    {
        if (is_null($due_now)) {
            throw new \InvalidArgumentException('non-nullable due_now cannot be null');
        }
        $this->container['due_now'] = $due_now;

        return $this;
    }

    /**
     * Gets new_charges
     *
     * @return int
     */
    public function getNewCharges()
    {
        return $this->container['new_charges'];
    }

    /**
     * Sets new_charges
     *
     * @param int $new_charges new_charges
     *
     * @return self
     */
    public function setNewCharges($new_charges)
    {
        if (is_null($new_charges)) {
            throw new \InvalidArgumentException('non-nullable new_charges cannot be null');
        }
        $this->container['new_charges'] = $new_charges;

        return $this;
    }

    /**
     * Gets percent_off
     *
     * @return float
     */
    public function getPercentOff()
    {
        return $this->container['percent_off'];
    }

    /**
     * Sets percent_off
     *
     * @param float $percent_off percent_off
     *
     * @return self
     */
    public function setPercentOff($percent_off)
    {
        if (is_null($percent_off)) {
            throw new \InvalidArgumentException('non-nullable percent_off cannot be null');
        }
        $this->container['percent_off'] = $percent_off;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return \DateTime
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param \DateTime $period_start period_start
     *
     * @return self
     */
    public function setPeriodStart($period_start)
    {
        if (is_null($period_start)) {
            throw new \InvalidArgumentException('non-nullable period_start cannot be null');
        }
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets promo_code_applied
     *
     * @return bool
     */
    public function getPromoCodeApplied()
    {
        return $this->container['promo_code_applied'];
    }

    /**
     * Sets promo_code_applied
     *
     * @param bool $promo_code_applied promo_code_applied
     *
     * @return self
     */
    public function setPromoCodeApplied($promo_code_applied)
    {
        if (is_null($promo_code_applied)) {
            throw new \InvalidArgumentException('non-nullable promo_code_applied cannot be null');
        }
        $this->container['promo_code_applied'] = $promo_code_applied;

        return $this;
    }

    /**
     * Gets proration
     *
     * @return int
     */
    public function getProration()
    {
        return $this->container['proration'];
    }

    /**
     * Sets proration
     *
     * @param int $proration proration
     *
     * @return self
     */
    public function setProration($proration)
    {
        if (is_null($proration)) {
            throw new \InvalidArgumentException('non-nullable proration cannot be null');
        }
        $this->container['proration'] = $proration;

        return $this;
    }

    /**
     * Gets trial_end
     *
     * @return \DateTime|null
     */
    public function getTrialEnd()
    {
        return $this->container['trial_end'];
    }

    /**
     * Sets trial_end
     *
     * @param \DateTime|null $trial_end trial_end
     *
     * @return self
     */
    public function setTrialEnd($trial_end)
    {
        if (is_null($trial_end)) {
            array_push($this->openAPINullablesSetToNull, 'trial_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trial_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trial_end'] = $trial_end;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


