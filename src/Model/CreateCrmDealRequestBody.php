<?php
/**
 * CreateCrmDealRequestBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Schematic API
 *
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: engineering@schematichq.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Schematic\Model;

use \ArrayAccess;
use \Schematic\ObjectSerializer;

/**
 * CreateCrmDealRequestBody Class Doc Comment
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCrmDealRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateCrmDealRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'arr' => 'string',
        'crm_company_id' => 'string',
        'crm_company_key' => 'string',
        'crm_product_id' => 'string',
        'crm_type' => 'string',
        'deal_external_id' => 'string',
        'deal_name' => 'string',
        'deal_stage' => 'string',
        'mrr' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'arr' => null,
        'crm_company_id' => null,
        'crm_company_key' => null,
        'crm_product_id' => null,
        'crm_type' => null,
        'deal_external_id' => null,
        'deal_name' => null,
        'deal_stage' => null,
        'mrr' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'arr' => true,
        'crm_company_id' => true,
        'crm_company_key' => false,
        'crm_product_id' => true,
        'crm_type' => false,
        'deal_external_id' => false,
        'deal_name' => true,
        'deal_stage' => true,
        'mrr' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arr' => 'arr',
        'crm_company_id' => 'crm_company_id',
        'crm_company_key' => 'crm_company_key',
        'crm_product_id' => 'crm_product_id',
        'crm_type' => 'crm_type',
        'deal_external_id' => 'deal_external_id',
        'deal_name' => 'deal_name',
        'deal_stage' => 'deal_stage',
        'mrr' => 'mrr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arr' => 'setArr',
        'crm_company_id' => 'setCrmCompanyId',
        'crm_company_key' => 'setCrmCompanyKey',
        'crm_product_id' => 'setCrmProductId',
        'crm_type' => 'setCrmType',
        'deal_external_id' => 'setDealExternalId',
        'deal_name' => 'setDealName',
        'deal_stage' => 'setDealStage',
        'mrr' => 'setMrr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arr' => 'getArr',
        'crm_company_id' => 'getCrmCompanyId',
        'crm_company_key' => 'getCrmCompanyKey',
        'crm_product_id' => 'getCrmProductId',
        'crm_type' => 'getCrmType',
        'deal_external_id' => 'getDealExternalId',
        'deal_name' => 'getDealName',
        'deal_stage' => 'getDealStage',
        'mrr' => 'getMrr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('arr', $data ?? [], null);
        $this->setIfExists('crm_company_id', $data ?? [], null);
        $this->setIfExists('crm_company_key', $data ?? [], null);
        $this->setIfExists('crm_product_id', $data ?? [], null);
        $this->setIfExists('crm_type', $data ?? [], null);
        $this->setIfExists('deal_external_id', $data ?? [], null);
        $this->setIfExists('deal_name', $data ?? [], null);
        $this->setIfExists('deal_stage', $data ?? [], null);
        $this->setIfExists('mrr', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['crm_company_key'] === null) {
            $invalidProperties[] = "'crm_company_key' can't be null";
        }
        if ($this->container['crm_type'] === null) {
            $invalidProperties[] = "'crm_type' can't be null";
        }
        if ($this->container['deal_external_id'] === null) {
            $invalidProperties[] = "'deal_external_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arr
     *
     * @return string|null
     */
    public function getArr()
    {
        return $this->container['arr'];
    }

    /**
     * Sets arr
     *
     * @param string|null $arr arr
     *
     * @return self
     */
    public function setArr($arr)
    {
        if (is_null($arr)) {
            array_push($this->openAPINullablesSetToNull, 'arr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('arr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['arr'] = $arr;

        return $this;
    }

    /**
     * Gets crm_company_id
     *
     * @return string|null
     */
    public function getCrmCompanyId()
    {
        return $this->container['crm_company_id'];
    }

    /**
     * Sets crm_company_id
     *
     * @param string|null $crm_company_id crm_company_id
     *
     * @return self
     */
    public function setCrmCompanyId($crm_company_id)
    {
        if (is_null($crm_company_id)) {
            array_push($this->openAPINullablesSetToNull, 'crm_company_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crm_company_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crm_company_id'] = $crm_company_id;

        return $this;
    }

    /**
     * Gets crm_company_key
     *
     * @return string
     */
    public function getCrmCompanyKey()
    {
        return $this->container['crm_company_key'];
    }

    /**
     * Sets crm_company_key
     *
     * @param string $crm_company_key crm_company_key
     *
     * @return self
     */
    public function setCrmCompanyKey($crm_company_key)
    {
        if (is_null($crm_company_key)) {
            throw new \InvalidArgumentException('non-nullable crm_company_key cannot be null');
        }
        $this->container['crm_company_key'] = $crm_company_key;

        return $this;
    }

    /**
     * Gets crm_product_id
     *
     * @return string|null
     */
    public function getCrmProductId()
    {
        return $this->container['crm_product_id'];
    }

    /**
     * Sets crm_product_id
     *
     * @param string|null $crm_product_id crm_product_id
     *
     * @return self
     */
    public function setCrmProductId($crm_product_id)
    {
        if (is_null($crm_product_id)) {
            array_push($this->openAPINullablesSetToNull, 'crm_product_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crm_product_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crm_product_id'] = $crm_product_id;

        return $this;
    }

    /**
     * Gets crm_type
     *
     * @return string
     */
    public function getCrmType()
    {
        return $this->container['crm_type'];
    }

    /**
     * Sets crm_type
     *
     * @param string $crm_type crm_type
     *
     * @return self
     */
    public function setCrmType($crm_type)
    {
        if (is_null($crm_type)) {
            throw new \InvalidArgumentException('non-nullable crm_type cannot be null');
        }
        $this->container['crm_type'] = $crm_type;

        return $this;
    }

    /**
     * Gets deal_external_id
     *
     * @return string
     */
    public function getDealExternalId()
    {
        return $this->container['deal_external_id'];
    }

    /**
     * Sets deal_external_id
     *
     * @param string $deal_external_id deal_external_id
     *
     * @return self
     */
    public function setDealExternalId($deal_external_id)
    {
        if (is_null($deal_external_id)) {
            throw new \InvalidArgumentException('non-nullable deal_external_id cannot be null');
        }
        $this->container['deal_external_id'] = $deal_external_id;

        return $this;
    }

    /**
     * Gets deal_name
     *
     * @return string|null
     */
    public function getDealName()
    {
        return $this->container['deal_name'];
    }

    /**
     * Sets deal_name
     *
     * @param string|null $deal_name deal_name
     *
     * @return self
     */
    public function setDealName($deal_name)
    {
        if (is_null($deal_name)) {
            array_push($this->openAPINullablesSetToNull, 'deal_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deal_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deal_name'] = $deal_name;

        return $this;
    }

    /**
     * Gets deal_stage
     *
     * @return string|null
     */
    public function getDealStage()
    {
        return $this->container['deal_stage'];
    }

    /**
     * Sets deal_stage
     *
     * @param string|null $deal_stage deal_stage
     *
     * @return self
     */
    public function setDealStage($deal_stage)
    {
        if (is_null($deal_stage)) {
            array_push($this->openAPINullablesSetToNull, 'deal_stage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deal_stage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deal_stage'] = $deal_stage;

        return $this;
    }

    /**
     * Gets mrr
     *
     * @return string|null
     */
    public function getMrr()
    {
        return $this->container['mrr'];
    }

    /**
     * Sets mrr
     *
     * @param string|null $mrr mrr
     *
     * @return self
     */
    public function setMrr($mrr)
    {
        if (is_null($mrr)) {
            array_push($this->openAPINullablesSetToNull, 'mrr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mrr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mrr'] = $mrr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


