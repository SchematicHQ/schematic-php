<?php
/**
 * CompanyDetailResponseData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Schematic API
 *
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: engineering@schematichq.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Schematic\Model;

use \ArrayAccess;
use \Schematic\ObjectSerializer;

/**
 * CompanyDetailResponseData Class Doc Comment
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyDetailResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyDetailResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'add_ons' => '\Schematic\Model\CompanyPlanWithBillingSubView[]',
        'billing_subscription' => '\Schematic\Model\BillingSubscriptionView',
        'billing_subscriptions' => '\Schematic\Model\BillingSubscriptionView[]',
        'created_at' => '\DateTime',
        'entity_traits' => '\Schematic\Model\EntityTraitDetailResponseData[]',
        'environment_id' => 'string',
        'id' => 'string',
        'keys' => '\Schematic\Model\EntityKeyDetailResponseData[]',
        'last_seen_at' => '\DateTime',
        'logo_url' => 'string',
        'metrics' => '\Schematic\Model\CompanyEventPeriodMetricsResponseData[]',
        'name' => 'string',
        'plan' => '\Schematic\Model\CompanyPlanWithBillingSubView',
        'plans' => '\Schematic\Model\GenericPreviewObject[]',
        'traits' => 'object',
        'updated_at' => '\DateTime',
        'user_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'add_ons' => null,
        'billing_subscription' => null,
        'billing_subscriptions' => null,
        'created_at' => 'date-time',
        'entity_traits' => null,
        'environment_id' => null,
        'id' => null,
        'keys' => null,
        'last_seen_at' => 'date-time',
        'logo_url' => null,
        'metrics' => null,
        'name' => null,
        'plan' => null,
        'plans' => null,
        'traits' => null,
        'updated_at' => 'date-time',
        'user_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'add_ons' => false,
        'billing_subscription' => false,
        'billing_subscriptions' => false,
        'created_at' => false,
        'entity_traits' => false,
        'environment_id' => false,
        'id' => false,
        'keys' => false,
        'last_seen_at' => true,
        'logo_url' => true,
        'metrics' => false,
        'name' => false,
        'plan' => false,
        'plans' => false,
        'traits' => false,
        'updated_at' => false,
        'user_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_ons' => 'add_ons',
        'billing_subscription' => 'billing_subscription',
        'billing_subscriptions' => 'billing_subscriptions',
        'created_at' => 'created_at',
        'entity_traits' => 'entity_traits',
        'environment_id' => 'environment_id',
        'id' => 'id',
        'keys' => 'keys',
        'last_seen_at' => 'last_seen_at',
        'logo_url' => 'logo_url',
        'metrics' => 'metrics',
        'name' => 'name',
        'plan' => 'plan',
        'plans' => 'plans',
        'traits' => 'traits',
        'updated_at' => 'updated_at',
        'user_count' => 'user_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_ons' => 'setAddOns',
        'billing_subscription' => 'setBillingSubscription',
        'billing_subscriptions' => 'setBillingSubscriptions',
        'created_at' => 'setCreatedAt',
        'entity_traits' => 'setEntityTraits',
        'environment_id' => 'setEnvironmentId',
        'id' => 'setId',
        'keys' => 'setKeys',
        'last_seen_at' => 'setLastSeenAt',
        'logo_url' => 'setLogoUrl',
        'metrics' => 'setMetrics',
        'name' => 'setName',
        'plan' => 'setPlan',
        'plans' => 'setPlans',
        'traits' => 'setTraits',
        'updated_at' => 'setUpdatedAt',
        'user_count' => 'setUserCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_ons' => 'getAddOns',
        'billing_subscription' => 'getBillingSubscription',
        'billing_subscriptions' => 'getBillingSubscriptions',
        'created_at' => 'getCreatedAt',
        'entity_traits' => 'getEntityTraits',
        'environment_id' => 'getEnvironmentId',
        'id' => 'getId',
        'keys' => 'getKeys',
        'last_seen_at' => 'getLastSeenAt',
        'logo_url' => 'getLogoUrl',
        'metrics' => 'getMetrics',
        'name' => 'getName',
        'plan' => 'getPlan',
        'plans' => 'getPlans',
        'traits' => 'getTraits',
        'updated_at' => 'getUpdatedAt',
        'user_count' => 'getUserCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('add_ons', $data ?? [], null);
        $this->setIfExists('billing_subscription', $data ?? [], null);
        $this->setIfExists('billing_subscriptions', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('entity_traits', $data ?? [], null);
        $this->setIfExists('environment_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('keys', $data ?? [], null);
        $this->setIfExists('last_seen_at', $data ?? [], null);
        $this->setIfExists('logo_url', $data ?? [], null);
        $this->setIfExists('metrics', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('plans', $data ?? [], null);
        $this->setIfExists('traits', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('user_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['add_ons'] === null) {
            $invalidProperties[] = "'add_ons' can't be null";
        }
        if ($this->container['billing_subscriptions'] === null) {
            $invalidProperties[] = "'billing_subscriptions' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['entity_traits'] === null) {
            $invalidProperties[] = "'entity_traits' can't be null";
        }
        if ($this->container['environment_id'] === null) {
            $invalidProperties[] = "'environment_id' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['keys'] === null) {
            $invalidProperties[] = "'keys' can't be null";
        }
        if ($this->container['metrics'] === null) {
            $invalidProperties[] = "'metrics' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['plans'] === null) {
            $invalidProperties[] = "'plans' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['user_count'] === null) {
            $invalidProperties[] = "'user_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_ons
     *
     * @return \Schematic\Model\CompanyPlanWithBillingSubView[]
     */
    public function getAddOns()
    {
        return $this->container['add_ons'];
    }

    /**
     * Sets add_ons
     *
     * @param \Schematic\Model\CompanyPlanWithBillingSubView[] $add_ons add_ons
     *
     * @return self
     */
    public function setAddOns($add_ons)
    {
        if (is_null($add_ons)) {
            throw new \InvalidArgumentException('non-nullable add_ons cannot be null');
        }
        $this->container['add_ons'] = $add_ons;

        return $this;
    }

    /**
     * Gets billing_subscription
     *
     * @return \Schematic\Model\BillingSubscriptionView|null
     */
    public function getBillingSubscription()
    {
        return $this->container['billing_subscription'];
    }

    /**
     * Sets billing_subscription
     *
     * @param \Schematic\Model\BillingSubscriptionView|null $billing_subscription billing_subscription
     *
     * @return self
     */
    public function setBillingSubscription($billing_subscription)
    {
        if (is_null($billing_subscription)) {
            throw new \InvalidArgumentException('non-nullable billing_subscription cannot be null');
        }
        $this->container['billing_subscription'] = $billing_subscription;

        return $this;
    }

    /**
     * Gets billing_subscriptions
     *
     * @return \Schematic\Model\BillingSubscriptionView[]
     */
    public function getBillingSubscriptions()
    {
        return $this->container['billing_subscriptions'];
    }

    /**
     * Sets billing_subscriptions
     *
     * @param \Schematic\Model\BillingSubscriptionView[] $billing_subscriptions billing_subscriptions
     *
     * @return self
     */
    public function setBillingSubscriptions($billing_subscriptions)
    {
        if (is_null($billing_subscriptions)) {
            throw new \InvalidArgumentException('non-nullable billing_subscriptions cannot be null');
        }
        $this->container['billing_subscriptions'] = $billing_subscriptions;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets entity_traits
     *
     * @return \Schematic\Model\EntityTraitDetailResponseData[]
     */
    public function getEntityTraits()
    {
        return $this->container['entity_traits'];
    }

    /**
     * Sets entity_traits
     *
     * @param \Schematic\Model\EntityTraitDetailResponseData[] $entity_traits entity_traits
     *
     * @return self
     */
    public function setEntityTraits($entity_traits)
    {
        if (is_null($entity_traits)) {
            throw new \InvalidArgumentException('non-nullable entity_traits cannot be null');
        }
        $this->container['entity_traits'] = $entity_traits;

        return $this;
    }

    /**
     * Gets environment_id
     *
     * @return string
     */
    public function getEnvironmentId()
    {
        return $this->container['environment_id'];
    }

    /**
     * Sets environment_id
     *
     * @param string $environment_id environment_id
     *
     * @return self
     */
    public function setEnvironmentId($environment_id)
    {
        if (is_null($environment_id)) {
            throw new \InvalidArgumentException('non-nullable environment_id cannot be null');
        }
        $this->container['environment_id'] = $environment_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets keys
     *
     * @return \Schematic\Model\EntityKeyDetailResponseData[]
     */
    public function getKeys()
    {
        return $this->container['keys'];
    }

    /**
     * Sets keys
     *
     * @param \Schematic\Model\EntityKeyDetailResponseData[] $keys keys
     *
     * @return self
     */
    public function setKeys($keys)
    {
        if (is_null($keys)) {
            throw new \InvalidArgumentException('non-nullable keys cannot be null');
        }
        $this->container['keys'] = $keys;

        return $this;
    }

    /**
     * Gets last_seen_at
     *
     * @return \DateTime|null
     */
    public function getLastSeenAt()
    {
        return $this->container['last_seen_at'];
    }

    /**
     * Sets last_seen_at
     *
     * @param \DateTime|null $last_seen_at last_seen_at
     *
     * @return self
     */
    public function setLastSeenAt($last_seen_at)
    {
        if (is_null($last_seen_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_seen_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_seen_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_seen_at'] = $last_seen_at;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        if (is_null($logo_url)) {
            array_push($this->openAPINullablesSetToNull, 'logo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \Schematic\Model\CompanyEventPeriodMetricsResponseData[]
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \Schematic\Model\CompanyEventPeriodMetricsResponseData[] $metrics metrics
     *
     * @return self
     */
    public function setMetrics($metrics)
    {
        if (is_null($metrics)) {
            throw new \InvalidArgumentException('non-nullable metrics cannot be null');
        }
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \Schematic\Model\CompanyPlanWithBillingSubView|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \Schematic\Model\CompanyPlanWithBillingSubView|null $plan plan
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets plans
     *
     * @return \Schematic\Model\GenericPreviewObject[]
     */
    public function getPlans()
    {
        return $this->container['plans'];
    }

    /**
     * Sets plans
     *
     * @param \Schematic\Model\GenericPreviewObject[] $plans plans
     *
     * @return self
     */
    public function setPlans($plans)
    {
        if (is_null($plans)) {
            throw new \InvalidArgumentException('non-nullable plans cannot be null');
        }
        $this->container['plans'] = $plans;

        return $this;
    }

    /**
     * Gets traits
     *
     * @return object|null
     */
    public function getTraits()
    {
        return $this->container['traits'];
    }

    /**
     * Sets traits
     *
     * @param object|null $traits A map of trait names to trait values
     *
     * @return self
     */
    public function setTraits($traits)
    {
        if (is_null($traits)) {
            throw new \InvalidArgumentException('non-nullable traits cannot be null');
        }
        $this->container['traits'] = $traits;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_count
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['user_count'];
    }

    /**
     * Sets user_count
     *
     * @param int $user_count user_count
     *
     * @return self
     */
    public function setUserCount($user_count)
    {
        if (is_null($user_count)) {
            throw new \InvalidArgumentException('non-nullable user_count cannot be null');
        }
        $this->container['user_count'] = $user_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


