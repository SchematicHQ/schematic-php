<?php
/**
 * UsageBasedEntitlementResponseData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Schematic API
 *
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: engineering@schematichq.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Schematic\Model;

use \ArrayAccess;
use \Schematic\ObjectSerializer;

/**
 * UsageBasedEntitlementResponseData Class Doc Comment
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UsageBasedEntitlementResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UsageBasedEntitlementResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'feature_id' => 'string',
        'metered_price' => '\Schematic\Model\BillingPriceView',
        'metric_period' => 'string',
        'metric_period_month_reset' => 'string',
        'monthly_usage_based_price' => '\Schematic\Model\BillingPriceView',
        'price_behavior' => 'string',
        'value_bool' => 'bool',
        'value_numeric' => 'int',
        'value_type' => 'string',
        'yearly_usage_based_price' => '\Schematic\Model\BillingPriceView'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'feature_id' => null,
        'metered_price' => null,
        'metric_period' => null,
        'metric_period_month_reset' => null,
        'monthly_usage_based_price' => null,
        'price_behavior' => null,
        'value_bool' => null,
        'value_numeric' => null,
        'value_type' => null,
        'yearly_usage_based_price' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'feature_id' => false,
        'metered_price' => false,
        'metric_period' => true,
        'metric_period_month_reset' => true,
        'monthly_usage_based_price' => false,
        'price_behavior' => true,
        'value_bool' => true,
        'value_numeric' => true,
        'value_type' => false,
        'yearly_usage_based_price' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feature_id' => 'feature_id',
        'metered_price' => 'metered_price',
        'metric_period' => 'metric_period',
        'metric_period_month_reset' => 'metric_period_month_reset',
        'monthly_usage_based_price' => 'monthly_usage_based_price',
        'price_behavior' => 'price_behavior',
        'value_bool' => 'value_bool',
        'value_numeric' => 'value_numeric',
        'value_type' => 'value_type',
        'yearly_usage_based_price' => 'yearly_usage_based_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feature_id' => 'setFeatureId',
        'metered_price' => 'setMeteredPrice',
        'metric_period' => 'setMetricPeriod',
        'metric_period_month_reset' => 'setMetricPeriodMonthReset',
        'monthly_usage_based_price' => 'setMonthlyUsageBasedPrice',
        'price_behavior' => 'setPriceBehavior',
        'value_bool' => 'setValueBool',
        'value_numeric' => 'setValueNumeric',
        'value_type' => 'setValueType',
        'yearly_usage_based_price' => 'setYearlyUsageBasedPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feature_id' => 'getFeatureId',
        'metered_price' => 'getMeteredPrice',
        'metric_period' => 'getMetricPeriod',
        'metric_period_month_reset' => 'getMetricPeriodMonthReset',
        'monthly_usage_based_price' => 'getMonthlyUsageBasedPrice',
        'price_behavior' => 'getPriceBehavior',
        'value_bool' => 'getValueBool',
        'value_numeric' => 'getValueNumeric',
        'value_type' => 'getValueType',
        'yearly_usage_based_price' => 'getYearlyUsageBasedPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('feature_id', $data ?? [], null);
        $this->setIfExists('metered_price', $data ?? [], null);
        $this->setIfExists('metric_period', $data ?? [], null);
        $this->setIfExists('metric_period_month_reset', $data ?? [], null);
        $this->setIfExists('monthly_usage_based_price', $data ?? [], null);
        $this->setIfExists('price_behavior', $data ?? [], null);
        $this->setIfExists('value_bool', $data ?? [], null);
        $this->setIfExists('value_numeric', $data ?? [], null);
        $this->setIfExists('value_type', $data ?? [], null);
        $this->setIfExists('yearly_usage_based_price', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['feature_id'] === null) {
            $invalidProperties[] = "'feature_id' can't be null";
        }
        if ($this->container['value_type'] === null) {
            $invalidProperties[] = "'value_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feature_id
     *
     * @return string
     */
    public function getFeatureId()
    {
        return $this->container['feature_id'];
    }

    /**
     * Sets feature_id
     *
     * @param string $feature_id feature_id
     *
     * @return self
     */
    public function setFeatureId($feature_id)
    {
        if (is_null($feature_id)) {
            throw new \InvalidArgumentException('non-nullable feature_id cannot be null');
        }
        $this->container['feature_id'] = $feature_id;

        return $this;
    }

    /**
     * Gets metered_price
     *
     * @return \Schematic\Model\BillingPriceView|null
     */
    public function getMeteredPrice()
    {
        return $this->container['metered_price'];
    }

    /**
     * Sets metered_price
     *
     * @param \Schematic\Model\BillingPriceView|null $metered_price metered_price
     *
     * @return self
     */
    public function setMeteredPrice($metered_price)
    {
        if (is_null($metered_price)) {
            throw new \InvalidArgumentException('non-nullable metered_price cannot be null');
        }
        $this->container['metered_price'] = $metered_price;

        return $this;
    }

    /**
     * Gets metric_period
     *
     * @return string|null
     */
    public function getMetricPeriod()
    {
        return $this->container['metric_period'];
    }

    /**
     * Sets metric_period
     *
     * @param string|null $metric_period metric_period
     *
     * @return self
     */
    public function setMetricPeriod($metric_period)
    {
        if (is_null($metric_period)) {
            array_push($this->openAPINullablesSetToNull, 'metric_period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metric_period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metric_period'] = $metric_period;

        return $this;
    }

    /**
     * Gets metric_period_month_reset
     *
     * @return string|null
     */
    public function getMetricPeriodMonthReset()
    {
        return $this->container['metric_period_month_reset'];
    }

    /**
     * Sets metric_period_month_reset
     *
     * @param string|null $metric_period_month_reset metric_period_month_reset
     *
     * @return self
     */
    public function setMetricPeriodMonthReset($metric_period_month_reset)
    {
        if (is_null($metric_period_month_reset)) {
            array_push($this->openAPINullablesSetToNull, 'metric_period_month_reset');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metric_period_month_reset', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metric_period_month_reset'] = $metric_period_month_reset;

        return $this;
    }

    /**
     * Gets monthly_usage_based_price
     *
     * @return \Schematic\Model\BillingPriceView|null
     */
    public function getMonthlyUsageBasedPrice()
    {
        return $this->container['monthly_usage_based_price'];
    }

    /**
     * Sets monthly_usage_based_price
     *
     * @param \Schematic\Model\BillingPriceView|null $monthly_usage_based_price monthly_usage_based_price
     *
     * @return self
     */
    public function setMonthlyUsageBasedPrice($monthly_usage_based_price)
    {
        if (is_null($monthly_usage_based_price)) {
            throw new \InvalidArgumentException('non-nullable monthly_usage_based_price cannot be null');
        }
        $this->container['monthly_usage_based_price'] = $monthly_usage_based_price;

        return $this;
    }

    /**
     * Gets price_behavior
     *
     * @return string|null
     */
    public function getPriceBehavior()
    {
        return $this->container['price_behavior'];
    }

    /**
     * Sets price_behavior
     *
     * @param string|null $price_behavior price_behavior
     *
     * @return self
     */
    public function setPriceBehavior($price_behavior)
    {
        if (is_null($price_behavior)) {
            array_push($this->openAPINullablesSetToNull, 'price_behavior');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_behavior', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_behavior'] = $price_behavior;

        return $this;
    }

    /**
     * Gets value_bool
     *
     * @return bool|null
     */
    public function getValueBool()
    {
        return $this->container['value_bool'];
    }

    /**
     * Sets value_bool
     *
     * @param bool|null $value_bool value_bool
     *
     * @return self
     */
    public function setValueBool($value_bool)
    {
        if (is_null($value_bool)) {
            array_push($this->openAPINullablesSetToNull, 'value_bool');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value_bool', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value_bool'] = $value_bool;

        return $this;
    }

    /**
     * Gets value_numeric
     *
     * @return int|null
     */
    public function getValueNumeric()
    {
        return $this->container['value_numeric'];
    }

    /**
     * Sets value_numeric
     *
     * @param int|null $value_numeric value_numeric
     *
     * @return self
     */
    public function setValueNumeric($value_numeric)
    {
        if (is_null($value_numeric)) {
            array_push($this->openAPINullablesSetToNull, 'value_numeric');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value_numeric', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value_numeric'] = $value_numeric;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return string
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param string $value_type value_type
     *
     * @return self
     */
    public function setValueType($value_type)
    {
        if (is_null($value_type)) {
            throw new \InvalidArgumentException('non-nullable value_type cannot be null');
        }
        $this->container['value_type'] = $value_type;

        return $this;
    }

    /**
     * Gets yearly_usage_based_price
     *
     * @return \Schematic\Model\BillingPriceView|null
     */
    public function getYearlyUsageBasedPrice()
    {
        return $this->container['yearly_usage_based_price'];
    }

    /**
     * Sets yearly_usage_based_price
     *
     * @param \Schematic\Model\BillingPriceView|null $yearly_usage_based_price yearly_usage_based_price
     *
     * @return self
     */
    public function setYearlyUsageBasedPrice($yearly_usage_based_price)
    {
        if (is_null($yearly_usage_based_price)) {
            throw new \InvalidArgumentException('non-nullable yearly_usage_based_price cannot be null');
        }
        $this->container['yearly_usage_based_price'] = $yearly_usage_based_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


