<?php
/**
 * ComponentPreviewResponseData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Schematic API
 *
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: engineering@schematichq.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Schematic\Model;

use \ArrayAccess;
use \Schematic\ObjectSerializer;

/**
 * ComponentPreviewResponseData Class Doc Comment
 *
 * @category Class
 * @description The returned resource
 * @package  Schematic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComponentPreviewResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ComponentPreviewResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active_add_ons' => '\Schematic\Model\CompanyPlanDetailResponseData[]',
        'active_plans' => '\Schematic\Model\CompanyPlanDetailResponseData[]',
        'active_usage_based_entitlements' => '\Schematic\Model\UsageBasedEntitlementResponseData[]',
        'capabilities' => '\Schematic\Model\ComponentCapabilities',
        'company' => '\Schematic\Model\CompanyDetailResponseData',
        'component' => '\Schematic\Model\ComponentResponseData',
        'default_plan' => '\Schematic\Model\PlanDetailResponseData',
        'feature_usage' => '\Schematic\Model\FeatureUsageDetailResponseData',
        'invoices' => '\Schematic\Model\InvoiceResponseData[]',
        'stripe_embed' => '\Schematic\Model\StripeEmbedInfo',
        'subscription' => '\Schematic\Model\CompanySubscriptionResponseData',
        'trial_payment_method_required' => 'bool',
        'upcoming_invoice' => '\Schematic\Model\InvoiceResponseData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active_add_ons' => null,
        'active_plans' => null,
        'active_usage_based_entitlements' => null,
        'capabilities' => null,
        'company' => null,
        'component' => null,
        'default_plan' => null,
        'feature_usage' => null,
        'invoices' => null,
        'stripe_embed' => null,
        'subscription' => null,
        'trial_payment_method_required' => null,
        'upcoming_invoice' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active_add_ons' => false,
        'active_plans' => false,
        'active_usage_based_entitlements' => false,
        'capabilities' => false,
        'company' => false,
        'component' => false,
        'default_plan' => false,
        'feature_usage' => false,
        'invoices' => false,
        'stripe_embed' => false,
        'subscription' => false,
        'trial_payment_method_required' => true,
        'upcoming_invoice' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_add_ons' => 'active_add_ons',
        'active_plans' => 'active_plans',
        'active_usage_based_entitlements' => 'active_usage_based_entitlements',
        'capabilities' => 'capabilities',
        'company' => 'company',
        'component' => 'component',
        'default_plan' => 'default_plan',
        'feature_usage' => 'feature_usage',
        'invoices' => 'invoices',
        'stripe_embed' => 'stripe_embed',
        'subscription' => 'subscription',
        'trial_payment_method_required' => 'trial_payment_method_required',
        'upcoming_invoice' => 'upcoming_invoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_add_ons' => 'setActiveAddOns',
        'active_plans' => 'setActivePlans',
        'active_usage_based_entitlements' => 'setActiveUsageBasedEntitlements',
        'capabilities' => 'setCapabilities',
        'company' => 'setCompany',
        'component' => 'setComponent',
        'default_plan' => 'setDefaultPlan',
        'feature_usage' => 'setFeatureUsage',
        'invoices' => 'setInvoices',
        'stripe_embed' => 'setStripeEmbed',
        'subscription' => 'setSubscription',
        'trial_payment_method_required' => 'setTrialPaymentMethodRequired',
        'upcoming_invoice' => 'setUpcomingInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_add_ons' => 'getActiveAddOns',
        'active_plans' => 'getActivePlans',
        'active_usage_based_entitlements' => 'getActiveUsageBasedEntitlements',
        'capabilities' => 'getCapabilities',
        'company' => 'getCompany',
        'component' => 'getComponent',
        'default_plan' => 'getDefaultPlan',
        'feature_usage' => 'getFeatureUsage',
        'invoices' => 'getInvoices',
        'stripe_embed' => 'getStripeEmbed',
        'subscription' => 'getSubscription',
        'trial_payment_method_required' => 'getTrialPaymentMethodRequired',
        'upcoming_invoice' => 'getUpcomingInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('active_add_ons', $data ?? [], null);
        $this->setIfExists('active_plans', $data ?? [], null);
        $this->setIfExists('active_usage_based_entitlements', $data ?? [], null);
        $this->setIfExists('capabilities', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('component', $data ?? [], null);
        $this->setIfExists('default_plan', $data ?? [], null);
        $this->setIfExists('feature_usage', $data ?? [], null);
        $this->setIfExists('invoices', $data ?? [], null);
        $this->setIfExists('stripe_embed', $data ?? [], null);
        $this->setIfExists('subscription', $data ?? [], null);
        $this->setIfExists('trial_payment_method_required', $data ?? [], null);
        $this->setIfExists('upcoming_invoice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['active_add_ons'] === null) {
            $invalidProperties[] = "'active_add_ons' can't be null";
        }
        if ($this->container['active_plans'] === null) {
            $invalidProperties[] = "'active_plans' can't be null";
        }
        if ($this->container['active_usage_based_entitlements'] === null) {
            $invalidProperties[] = "'active_usage_based_entitlements' can't be null";
        }
        if ($this->container['invoices'] === null) {
            $invalidProperties[] = "'invoices' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_add_ons
     *
     * @return \Schematic\Model\CompanyPlanDetailResponseData[]
     */
    public function getActiveAddOns()
    {
        return $this->container['active_add_ons'];
    }

    /**
     * Sets active_add_ons
     *
     * @param \Schematic\Model\CompanyPlanDetailResponseData[] $active_add_ons active_add_ons
     *
     * @return self
     */
    public function setActiveAddOns($active_add_ons)
    {
        if (is_null($active_add_ons)) {
            throw new \InvalidArgumentException('non-nullable active_add_ons cannot be null');
        }
        $this->container['active_add_ons'] = $active_add_ons;

        return $this;
    }

    /**
     * Gets active_plans
     *
     * @return \Schematic\Model\CompanyPlanDetailResponseData[]
     */
    public function getActivePlans()
    {
        return $this->container['active_plans'];
    }

    /**
     * Sets active_plans
     *
     * @param \Schematic\Model\CompanyPlanDetailResponseData[] $active_plans active_plans
     *
     * @return self
     */
    public function setActivePlans($active_plans)
    {
        if (is_null($active_plans)) {
            throw new \InvalidArgumentException('non-nullable active_plans cannot be null');
        }
        $this->container['active_plans'] = $active_plans;

        return $this;
    }

    /**
     * Gets active_usage_based_entitlements
     *
     * @return \Schematic\Model\UsageBasedEntitlementResponseData[]
     */
    public function getActiveUsageBasedEntitlements()
    {
        return $this->container['active_usage_based_entitlements'];
    }

    /**
     * Sets active_usage_based_entitlements
     *
     * @param \Schematic\Model\UsageBasedEntitlementResponseData[] $active_usage_based_entitlements active_usage_based_entitlements
     *
     * @return self
     */
    public function setActiveUsageBasedEntitlements($active_usage_based_entitlements)
    {
        if (is_null($active_usage_based_entitlements)) {
            throw new \InvalidArgumentException('non-nullable active_usage_based_entitlements cannot be null');
        }
        $this->container['active_usage_based_entitlements'] = $active_usage_based_entitlements;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return \Schematic\Model\ComponentCapabilities|null
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param \Schematic\Model\ComponentCapabilities|null $capabilities capabilities
     *
     * @return self
     */
    public function setCapabilities($capabilities)
    {
        if (is_null($capabilities)) {
            throw new \InvalidArgumentException('non-nullable capabilities cannot be null');
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Schematic\Model\CompanyDetailResponseData|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Schematic\Model\CompanyDetailResponseData|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets component
     *
     * @return \Schematic\Model\ComponentResponseData|null
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param \Schematic\Model\ComponentResponseData|null $component component
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets default_plan
     *
     * @return \Schematic\Model\PlanDetailResponseData|null
     */
    public function getDefaultPlan()
    {
        return $this->container['default_plan'];
    }

    /**
     * Sets default_plan
     *
     * @param \Schematic\Model\PlanDetailResponseData|null $default_plan default_plan
     *
     * @return self
     */
    public function setDefaultPlan($default_plan)
    {
        if (is_null($default_plan)) {
            throw new \InvalidArgumentException('non-nullable default_plan cannot be null');
        }
        $this->container['default_plan'] = $default_plan;

        return $this;
    }

    /**
     * Gets feature_usage
     *
     * @return \Schematic\Model\FeatureUsageDetailResponseData|null
     */
    public function getFeatureUsage()
    {
        return $this->container['feature_usage'];
    }

    /**
     * Sets feature_usage
     *
     * @param \Schematic\Model\FeatureUsageDetailResponseData|null $feature_usage feature_usage
     *
     * @return self
     */
    public function setFeatureUsage($feature_usage)
    {
        if (is_null($feature_usage)) {
            throw new \InvalidArgumentException('non-nullable feature_usage cannot be null');
        }
        $this->container['feature_usage'] = $feature_usage;

        return $this;
    }

    /**
     * Gets invoices
     *
     * @return \Schematic\Model\InvoiceResponseData[]
     */
    public function getInvoices()
    {
        return $this->container['invoices'];
    }

    /**
     * Sets invoices
     *
     * @param \Schematic\Model\InvoiceResponseData[] $invoices invoices
     *
     * @return self
     */
    public function setInvoices($invoices)
    {
        if (is_null($invoices)) {
            throw new \InvalidArgumentException('non-nullable invoices cannot be null');
        }
        $this->container['invoices'] = $invoices;

        return $this;
    }

    /**
     * Gets stripe_embed
     *
     * @return \Schematic\Model\StripeEmbedInfo|null
     */
    public function getStripeEmbed()
    {
        return $this->container['stripe_embed'];
    }

    /**
     * Sets stripe_embed
     *
     * @param \Schematic\Model\StripeEmbedInfo|null $stripe_embed stripe_embed
     *
     * @return self
     */
    public function setStripeEmbed($stripe_embed)
    {
        if (is_null($stripe_embed)) {
            throw new \InvalidArgumentException('non-nullable stripe_embed cannot be null');
        }
        $this->container['stripe_embed'] = $stripe_embed;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \Schematic\Model\CompanySubscriptionResponseData|null
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \Schematic\Model\CompanySubscriptionResponseData|null $subscription subscription
     *
     * @return self
     */
    public function setSubscription($subscription)
    {
        if (is_null($subscription)) {
            throw new \InvalidArgumentException('non-nullable subscription cannot be null');
        }
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets trial_payment_method_required
     *
     * @return bool|null
     */
    public function getTrialPaymentMethodRequired()
    {
        return $this->container['trial_payment_method_required'];
    }

    /**
     * Sets trial_payment_method_required
     *
     * @param bool|null $trial_payment_method_required trial_payment_method_required
     *
     * @return self
     */
    public function setTrialPaymentMethodRequired($trial_payment_method_required)
    {
        if (is_null($trial_payment_method_required)) {
            array_push($this->openAPINullablesSetToNull, 'trial_payment_method_required');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trial_payment_method_required', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trial_payment_method_required'] = $trial_payment_method_required;

        return $this;
    }

    /**
     * Gets upcoming_invoice
     *
     * @return \Schematic\Model\InvoiceResponseData|null
     */
    public function getUpcomingInvoice()
    {
        return $this->container['upcoming_invoice'];
    }

    /**
     * Sets upcoming_invoice
     *
     * @param \Schematic\Model\InvoiceResponseData|null $upcoming_invoice upcoming_invoice
     *
     * @return self
     */
    public function setUpcomingInvoice($upcoming_invoice)
    {
        if (is_null($upcoming_invoice)) {
            throw new \InvalidArgumentException('non-nullable upcoming_invoice cannot be null');
        }
        $this->container['upcoming_invoice'] = $upcoming_invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


